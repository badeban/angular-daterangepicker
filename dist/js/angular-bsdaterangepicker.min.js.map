{"version":3,"sources":["js/angular-bsdaterangepicker.js"],"names":["datepickerDefaults","$injector","settings","timePicker12Hour","timePickerSeconds","applyClass","cancelClass","buttonClasses","locale","format","has","get","$translate","merge","instant","clearLabel","weekLabel","separator","applyLabel","fromLabel","toLabel","cancelLabel","customRangeLabel","angular","copy","localisation","$translateProvider","DATEPICKER","APPLY","FROM","CANCEL","CUSTOM","SEPARATOR","WEEKLABEL","CLEAR","FORMAT","translations","preferredLanguage","restrict","$parse","DATEPICKER_DEFAULTS","require","opts","clearable","scope","link","max","customOpts","model","el","picker","modelCtrl","initialize","eventType","viewValue","daterangepicker","idx","extend","autoUpdateInput","start","end","$viewValue","$modelValue","results","$render","startDate","endDate","$formatters","formatters","length","eventHandlers","push","eventName","$scope","$evalAsync","$$lastCommittedViewValue","$$writeModelToScope","data","setStartDate","newValue","e","setEndDate","$validators","field","validate","validator","modelField","optName","attrs","boundary","actual","value","moment","$watch","date","min","clear","validateMax","isAfter","isSame","ngModelIsEmpty","momentize","isString","val","ngModelParser","objValue","x","ngModelRenderer","map","singleDatePicker","ngModelFormatter","formatDate","isMoment","join","newVal","$parsers","initBoundary","validateMin","newOpts","_","newClearable","options","on","$on","remove","module","factory","config","directive","dateRangePicker"],"mappings":"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","file":"angular-bsdaterangepicker.min.js","sourcesContent":["angular.module('angular-bsdaterangepicker', [])\n    .factory('DATEPICKER_DEFAULTS', datepickerDefaults)\n    .config(localisation)\n    .directive('dateRangePicker', dateRangePicker);\n\n\n/* @ngInject */\nfunction datepickerDefaults($injector) {\n    let settings = {\n        timePicker12Hour: false,\n        timePickerSeconds: false,\n        applyClass: 'btn-primary',\n        cancelClass: 'btn-default',\n        buttonClasses: 'btn btn-sm btn-flat',\n        locale: {\n            format: 'YYYY-MM-DD',\n            separator: ' - '\n        }\n    };\n    if ($injector.has('$translate')) {\n        let $translate = $injector.get('$translate');\n        if ($translate.instant('DATEPICKER.FORMAT') != 'DATEPICKER.FORMAT'){\n            _.merge(settings, {\n                clearLabel: $translate.instant('DATEPICKER.CLEAR'),\n                locale: {\n                    weekLabel: $translate.instant('DATEPICKER.WEEKLABEL'),\n                    separator: $translate.instant('DATEPICKER.SEPARATOR'),\n                    applyLabel: $translate.instant('DATEPICKER.APPLY'),\n                    fromLabel: $translate.instant('DATEPICKER.FROM'),\n                    toLabel: $translate.instant('DATEPICKER.TO'),\n                    cancelLabel: $translate.instant('DATEPICKER.CANCEL'),\n                    customRangeLabel: $translate.instant('DATEPICKER.CUSTOM'),\n                    format: $translate.instant('DATEPICKER.FORMAT')\n                }\n            });\n        }\n    }\n    return angular.copy(settings);\n}\n\n\n/* @ngInject */\nfunction localisation($injector) {\n    if ($injector.has('$translateProvider')) {\n        var $translateProvider = $injector.get('$translateProvider');\n        $translateProvider\n            .translations('en', {\n                DATEPICKER: {\n                    APPLY: 'Apply',\n                    FROM: 'From',\n                    TO: 'To',\n                    CANCEL: 'Cancel',\n                    CUSTOM: 'Custom range',\n                    SEPARATOR: ' - ',\n                    WEEKLABEL: 'W',\n                    CLEAR: 'Clear',\n                    FORMAT: 'YYYY-MM-DD'\n                }\n            })\n            .translations('de', {\n                DATEPICKER: {\n                    APPLY: 'Übernehmen',\n                    FROM: 'Von',\n                    TO: 'Bis',\n                    CANCEL: 'Abbrechen',\n                    CUSTOM: 'Benutzerdefiniert',\n                    SEPARATOR: ' - ',\n                    WEEKLABEL: 'KW',\n                    CLEAR: 'Löschen',\n                    FORMAT: 'DD.MM.YYYY'\n                }\n            })\n            .preferredLanguage('de');\n    }\n}\n\n/* @ngInject */\nfunction dateRangePicker(\n    $parse,\n    DATEPICKER_DEFAULTS\n) {\n    return {\n        require: 'ngModel',\n        restrict: 'A',\n        scope: {\n            min: '=',\n            max: '=',\n            model: '=ngModel',\n            opts: '=options',\n            clearable: '='\n        },\n        link: function (\n            $scope,\n            element,\n            attrs,\n            modelCtrl\n        ) {\n            let customOpts = $scope.opts,\n                el = $(element),\n                opts = _.merge({}, DATEPICKER_DEFAULTS, customOpts),\n                picker;\n\n            modelCtrl.$formatters.push(ngModelFormatter);\n            modelCtrl.$render = ngModelRenderer;\n            modelCtrl.$parsers.push(ngModelParser);\n            modelCtrl.$isEmpty = ngModelIsEmpty;\n\n            initialize();\n\n\n            if (opts.singleDatePicker) {\n                $scope.$watch('model', function (newVal) {\n                    if (newVal) {\n                        return setStartDate(newVal.startDate ? newVal.startDate : newVal);\n                    }\n                });\n            } else {\n                $scope.$watch('model.startDate', function (newVal) {\n                    return setStartDate(newVal);\n                });\n                $scope.$watch('model.endDate', function (newVal) {\n                    return setEndDate(newVal);\n                });\n            }\n\n            initBoundary('min', validateMin, 'startDate', 'minDate');\n            initBoundary('max', validateMax, 'endDate', 'maxDate');\n\n            if (attrs.options) {\n                $scope.$watch('opts', function (newOpts) {\n                    _.merge(opts, newOpts);\n                    return initialize();\n                }, true);\n            }\n\n            if (attrs.clearable) {\n                $scope.$watch('clearable', function (newClearable) {\n                    if (newClearable) {\n                        _.merge(opts, {\n                            locale: {\n                                cancelLabel: opts.clearLabel\n                            }\n                        });\n                    }\n                    initialize();\n                    if (newClearable) {\n                        return el.on('cancel.daterangepicker', function () {\n                            return $scope.$apply(function () {\n                                return $scope.model = opts.singleDatePicker ? null : {\n                                    startDate: null,\n                                    endDate: null\n                                };\n                            });\n                        });\n                    }\n                });\n            }\n\n            function initialize() {\n                var eventType, results;\n                el.daterangepicker(angular.extend(opts, {\n                    autoUpdateInput: false\n                }), function (start, end) {\n                    return $scope.$apply(function () {\n                        var formatters, idx, viewValue;\n                        $scope.model = opts.singleDatePicker ? start : {\n                            startDate: start,\n                            endDate: end\n                        };\n                        formatters = modelCtrl.$formatters;\n                        idx = formatters.length;\n                        viewValue = $scope.model;\n                        while (idx--) {\n                            viewValue = formatters[idx](viewValue);\n                        }\n                        modelCtrl.$viewValue = modelCtrl.$$lastCommittedViewValue = viewValue;\n                        modelCtrl.$modelValue = $scope.model;\n                        modelCtrl.$render();\n                        return modelCtrl.$$writeModelToScope();\n                    });\n                });\n                picker = el.data('daterangepicker');\n                results = [];\n                for (eventType in opts.eventHandlers) {\n                    results.push(el.on(eventType, function (e, picker) {\n                        var eventName;\n                        eventName = e.type + '.' + e.namespace;\n                        return $scope.$evalAsync(function () {\n                            return $parse(opts.eventHandlers[eventName])(e, picker);\n                        });\n                    }));\n                }\n                return results;\n            }\n\n            function setStartDate(newValue) {\n                if (picker && newValue) {\n                    if (picker.endDate < newValue) {\n                        picker.setEndDate(newValue);\n                    }\n                    opts.startDate = newValue;\n                    return picker.setStartDate(newValue);\n                }\n            }\n\n            function setEndDate(newValue) {\n                if (picker && newValue) {\n                    if (picker.startDate > newValue) {\n                        picker.setStartDate(newValue);\n                    }\n                    opts.endDate = newValue;\n                    return picker.setEndDate(newValue);\n                }\n            }\n\n            function initBoundary(field, validator, modelField, optName) {\n                if (attrs[field]) {\n                    modelCtrl.$validators[field] = function (value) {\n                        return value && validator(opts[optName], value[modelField]);\n                    };\n                    return $scope.$watch(field, function (date) {\n                        opts[optName] = date ? moment(date) : false;\n                        return initialize();\n                    });\n                }\n            }\n\n            function validate(validator) {\n                return function (boundary, actual) {\n                    if (boundary && actual) {\n                        return validator(moment(boundary), moment(actual));\n                    } else {\n                        return true;\n                    }\n                };\n            }\n\n            function validateMin() {\n                return validate(function (min, start) {\n                    return min.isBefore(start) || min.isSame(start, 'day');\n                });\n            }\n\n            function validateMax() {\n                return validate(function (max, end) {\n                    return max.isAfter(end) || max.isSame(end, 'day');\n                });\n            }\n\n            function clear() {\n                picker.setStartDate();\n                return picker.setEndDate();\n            }\n\n            function ngModelIsEmpty(val) {\n                return !(angular.isString(val) && val.length > 0);\n            }\n\n            function ngModelParser(val) {\n                var objValue, x;\n                objValue = {\n                    startDate: null,\n                    endDate: null\n                };\n                if (angular.isString(val) && val.length > 0) {\n                    if (opts.singleDatePicker) {\n                        objValue = momentize(val);\n                    } else {\n                        x = val.split(opts.locale.separator).map(momentize);\n                        objValue.startDate = x[0];\n                        objValue.endDate = x[1];\n                    }\n                }\n                function momentize(value) {\n                    return moment(value, opts.locale.format);\n                }\n\n                return objValue;\n            }\n\n            function ngModelRenderer() {\n                if (modelCtrl.$modelValue && modelCtrl.$modelValue.startDate) {\n                    setStartDate(modelCtrl.$modelValue.startDate);\n                    setEndDate(modelCtrl.$modelValue.endDate);\n                } else {\n                    clear();\n                }\n                return el.val(modelCtrl.$viewValue);\n            }\n\n            function ngModelFormatter(objValue) {\n                function formatDate(date) {\n                    if (!moment.isMoment(date)) {\n                        return moment(date).format(opts.locale.format);\n                    } else {\n                        return date.format(opts.locale.format);\n                    }\n                }\n\n                if (opts.singleDatePicker && (objValue || objValue === 0)) {\n                    return formatDate(objValue);\n                } else if (!opts.singleDatePicker && objValue && objValue.startDate) {\n                    return [formatDate(objValue.startDate), formatDate(objValue.endDate)]\n                        .join(opts.locale.separator);\n                } else {\n                    return '';\n                }\n            }\n\n            return $scope.$on('$destroy', function () {\n                return picker != null ? picker.remove() : void 0;\n            });\n        }\n    };\n}\n"],"sourceRoot":"/source/"}